                            | # Litao Zhou, ics518030910407
                            | # implementation of sum()
0x000:                      |     .pos 0
0x000: 30f40002000000000000 |     irmovq stack, %rsp
0x00a: 801400000000000000   |     call main
0x013: 00                   |     halt
                            | 
0x014:                      | main:
0x014: 30f76800000000000000 |     irmovq ele1, %rdi
0x01e: 802800000000000000   |     call sum # sum(&ele1)
0x027: 90                   |     ret
                            | 
0x028:                      | sum:
0x028: 6300                 |     xorq %rax, %rax         # sum = 0
0x02a: 705500000000000000   |     jmp test
0x033:                      | loop:
0x033: 50870000000000000000 |     mrmovq (%rdi), %r8      # read value
0x03d: 6080                 |     addq %r8, %rax          # sum += ls -> val
0x03f: 30f90800000000000000 |     irmovq $8, %r9          # constant 8
0x049: 6097                 |     addq %r9, %rdi          # ls->next
0x04b: 50770000000000000000 |     mrmovq (%rdi), %rdi
0x055:                      | test:
0x055: 6277                 |     andq %rdi, %rdi         # set CC
0x057: 743300000000000000   |     jne loop
0x060: 90                   |     ret
                            | 
                            | 
                            | # Sample linked list
0x068:                      |     .align 8
0x068:                      | ele1:
0x068: 0a00000000000000     |     .quad 0x00a
0x070: 7800000000000000     |     .quad ele2
0x078:                      | ele2:
0x078: b000000000000000     |     .quad 0x0b0
0x080: 8800000000000000     |     .quad ele3
0x088:                      | ele3:
0x088: 000c000000000000     |     .quad 0xc00
0x090: 0000000000000000     |     .quad 0
                            | 
0x200:                      |     .pos 0x200
0x200:                      | stack:
                            | 
