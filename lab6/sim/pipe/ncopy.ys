#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Litao Zhou, ics518030910407
#
# idea: 
# 1. use loop unrolling (8-way) to fill the bubble in load/use hazard
# 2. also unfold the remainder to a series of branches, to save the execution of src++/dst++ every loop
# 3. for remainder, let branch taken to be "continue", not taken to be "return", because ret only happens once while continue can happen at most 7 times
# 4. for remainder, fetch the next number in advance to fill the bubble in load/use hazard
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
#	xorq %rax,%rax		# count = 0;
Test:
	iaddq $-8,%rdx		# len <= 8 ?
	jl Loop0		# if so, goto remainder:

Unroll:
	mrmovq 0(%rdi), %r8
	mrmovq 8(%rdi), %r9	
	mrmovq 16(%rdi), %r10 
	mrmovq 24(%rdi), %r11	
	mrmovq 32(%rdi), %r12	
	mrmovq 40(%rdi), %r13 
	mrmovq 48(%rdi), %r14	
	mrmovq 56(%rdi), %rbp
	rmmovq %r8, 0(%rsi) 
	rmmovq %r9, 8(%rsi)
	rmmovq %r10 ,16(%rsi)
	rmmovq %r11	,24(%rsi)
	rmmovq %r12	,32(%rsi)
	rmmovq %r13 ,40(%rsi)
	rmmovq %r14	,48(%rsi)
	rmmovq %rbp, 56(%rsi)
	iaddq $64, %rdi
	iaddq $64, %rsi

Npos1:
	andq %r8, %r8
	jle Npos2
	iaddq $1, %rax		# count++
Npos2:
	andq %r9, %r9
	jle Npos3
	iaddq $1, %rax		# count++
Npos3:
	andq %r10, %r10
	jle Npos4
	iaddq $1, %rax		# count++
Npos4:
	andq %r11, %r11
	jle Npos5
	iaddq $1, %rax		# count++
Npos5:
	andq %r12, %r12
	jle Npos6
	iaddq $1, %rax		# count++
Npos6:
	andq %r13, %r13
	jle Npos7
	iaddq $1, %rax		# count++
Npos7:
	andq %r14, %r14
	jle Npos8
	iaddq $1, %rax		# count++
Npos8:
	andq %rbp, %rbp
	jle Npos9
	iaddq $1, %rax		# count++
Npos9:
	iaddq $-8,%rdx		# len > 8 ?
	jge Unroll		# if so, goto remainder:


Loop0:
	iaddq $8,%rdx		# restore len
	andq %rdx,%rdx
	jle Done			# if len = 0, end
Loop:
    mrmovq (%rdi), %r10	# read val from src...
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos:
	rmmovq %r10, (%rsi)	# ...and store it to dst
	iaddq $-1, %rdx		# len--
	andq %rdx,%rdx		# len <= 0?
	jle Done			# if so, goto Done:
	
	mrmovq 8(%rdi), %r11	# read val from src...
	andq %r11, %r11		# val <= 0?
	jle Nrem1			
	iaddq $1, %rax		# count++
Nrem1:
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	iaddq $-1, %rdx		# len--
	andq %rdx,%rdx		# len <= 0?
	jg Nrem1a			# if so, return:
	ret
Nrem1a:

	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	andq %r10, %r10		# val <= 0?
	jle Nrem2			
	iaddq $1, %rax		# count++
Nrem2:
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	iaddq $-1, %rdx		# len--
	andq %rdx,%rdx		# len <= 0?
	jg Nrem2a			# if so, return:
	ret
Nrem2a:

	mrmovq 32(%rdi), %r10	# read val from src...
	andq %r11, %r11		# val <= 0?
	jle Nrem3			
	iaddq $1, %rax		# count++
Nrem3:
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	iaddq $-1, %rdx		# len--
	andq %rdx,%rdx		# len <= 0?
	jg Nrem3a			# if so, return:
	ret
Nrem3a:

	mrmovq 40(%rdi), %r11	# read val from src...
	andq %r10, %r10		# val <= 0?
	jle Nrem4			
	iaddq $1, %rax		# count++
Nrem4:
	rmmovq %r10, 32(%rsi)	# ...and store it to dst
	iaddq $-1, %rdx		# len--
	andq %rdx,%rdx		# len <= 0?
	jg Nrem4a			# if so, return:
	ret
Nrem4a:

	mrmovq 48(%rdi), %r10	# read val from src...
	andq %r11, %r11		# val <= 0?
	jle Nrem5			
	iaddq $1, %rax		# count++
Nrem5:
	rmmovq %r11, 40(%rsi)	# ...and store it to dst
	iaddq $-1, %rdx		# len--
	andq %rdx,%rdx		# len <= 0?
	jg Nrem5a			# if so, return:
	ret

Nrem5a:
	mrmovq 56(%rdi), %r11	# read val from src...
	andq %r10, %r10		# val <= 0?
	jle Nrem6			
	iaddq $1, %rax		# count++
Nrem6:
	rmmovq %r10, 48(%rsi)	# ...and store it to dst
	iaddq $-1, %rdx		# len--
	andq %rdx,%rdx		# len <= 0?
	jg Nrem6a			# if so, return:
	ret

Nrem6a:
	andq %r11, %r11		# val <= 0?
	jle Nrem7			
	iaddq $1, %rax		# count++
Nrem7:
	rmmovq %r11, 56(%rsi)	# ...and store it to dst
	iaddq $-1, %rdx		# len--
	andq %rdx,%rdx		# len <= 0?

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
