#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# idea: use loop unrolling to fill the bubble in load/use hazard
# word_t ncopy(word_t *src, word_t *dst, word_t len)
# {
#     word_t count = 0;
#     word_t val;
# 
#     while (len > 3) {
#   	val1 = *src++;
#       val2 = *src++;
#   	*dst++ = val1;
#       *dst++ = val2;
#   	if (val1 > 0)
# 	      count++;
#   	if (val2 > 0)
# 	      count++;
#		if (val3 > 0)
# 	      count++;
# 	    len -= 3;
#     }
#    while (len > 0) {
#	   val = *src++;
#	   *dst++ = val;
#	   if (val > 0)
#	       count++;
#	   len--;
#    }
#    return count;
# }

# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	irmovq $1, %rcx		# constant 1
	irmovq $3, %r14		# constant 3
	irmovq $8, %r13		# constant 8
Test:
	subq %r14,%rdx		# len - 3
	jl Loop0		# if so, goto Done:

Unroll:
	addq %r14,%rdx		# restore len
	mrmovq (%rdi), %r10	# read val1 from src...
	addq %r13, %rdi		# src++
	mrmovq (%rdi), %r11	# read val2 from src...
	addq %r13, %rdi		# src++
	mrmovq (%rdi), %r12 # read val3 from src...
	addq %r13, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store val1 to dst
	addq %r13, %rsi		# dst++
	rmmovq %r11, (%rsi)	# ...and store val2 to dst
	addq %r13, %rsi		# dst++
	rmmovq %r12, (%rsi)	# ...and store val3 to dst
	addq %r13, %rsi		# dst++
	andq %r10, %r10		# val1 <= 0?
	jle Npos1			# if so, goto Npos:
	addq %rcx, %rax		# count++
Npos1:
	andq %r11, %r11		# val2 <= 0?
	jle Npos2			# if so, goto Npos:
	addq %rcx, %rax		# count++
Npos2:
	andq %r12, %r12		# val3 <= 0?
	jle Npos3			# if so, goto Npos:
	addq %rcx, %rax		# count++
Npos3:
	subq %r14,%rdx		# len - 3
	jge Test				

Loop0:
	addq %r14,%rdx		# restore len
	andq %rdx,%rdx
	jle Done			# if len = 0, end
Loop:
    mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	addq %rcx, %rax		# count++
Npos:
	subq %rcx, %rdx		# len--
	addq %r13, %rdi		# src++
	addq %r13, %rsi		# dst++
	andq %rdx,%rdx		# len > 0?
	jg Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
